#include <Arduino.h>
#include <CAN.h>
#include "Hackathon25.h"
#include <queue>
#include <vector>
#include <cmath>
#include <algorithm>

// Struktur für eine Position auf dem Spielfeld
struct Position {
    uint8_t x, y;
    float cost; // Gesamtkosten (g + h)
    float g;    // Kosten vom Startpunkt
    float h;    // Heuristik (geschätzte Kosten zum Ziel)
    Position* parent;

    Position(uint8_t x, uint8_t y, float g, float h, Position* parent = nullptr)
    : x(x), y(y), cost(g + h), g(g), h(h), parent(parent) {}

    bool operator>(const Position& other) const {
        return cost > other.cost;
    }
};

// Spielfeldgröße
const uint8_t GRID_WIDTH = 64;
const uint8_t GRID_HEIGHT = 64;

std::vector<std::pair<uint8_t, uint8_t>> player_traces[4]; 

// Hindernisse und Spielerpositionen
bool grid[GRID_WIDTH][GRID_HEIGHT] = {false}; // `true` bedeutet Hindernis

// Hilfsfunktion: Berechne Manhattan-Distanz
float heuristic(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
    return abs(x1 - x2) + abs(y1 - y2);
}

// Hilfsfunktion: Finde den kürzesten Weg mit A*
std::vector<Position> findPath(uint8_t startX, uint8_t startY, uint8_t goalX, uint8_t goalY) {
    std::priority_queue<Position, std::vector<Position>, std::greater<Position>> openSet;
    bool closedSet[GRID_WIDTH][GRID_HEIGHT] = {false};

    openSet.emplace(startX, startY, 0, heuristic(startX, startY, goalX, goalY));


    while (!openSet.empty()) {
        Position current = openSet.top();
        openSet.pop();

        if (current.x == goalX && current.y == goalY) {
            // Ziel erreicht, Pfad zurückverfolgen
            std::vector<Position> path;
            for (Position* p = &current; p != nullptr; p = p->parent) {
                path.push_back(*p);
            }
            std::reverse(path.begin(), path.end());
            return path;
        }

        if (closedSet[current.x][current.y]) continue;
        closedSet[current.x][current.y] = true;

        // Nachbarn prüfen
        const int dx[] = {0, 1, 0, -1};
        const int dy[] = {-1, 0, 1, 0};
        for (int i = 0; i < 4; i++) {
            uint8_t nx = (current.x + dx[i] + GRID_WIDTH) % GRID_WIDTH; // Wrap-around
            uint8_t ny = (current.y + dy[i] + GRID_HEIGHT) % GRID_HEIGHT; // Wrap-around

            if (!grid[nx][ny] && !closedSet[nx][ny]) {
                float g = current.g + 1; // Kosten für Bewegung
                float h = heuristic(nx, ny, goalX, goalY);
                openSet.emplace(nx, ny, g, h, new Position(current));
            }
        }
    }

    // Kein Pfad gefunden
    return {};
}

// Global variables
const uint32_t hardware_ID = (*(RoReg *)0x008061FCUL);
uint8_t player_ID = 0;
uint8_t game_ID = 0;
bool is_dead = false; 

// Globale Variable für den Timer
unsigned long lastRandomMove = 0; // Zeit der letzten zufälligen Bewegung (Millisekunden)

// Globale Variablen
int lastDirection = -1; // -1 bedeutet keine vorherige Richtung
unsigned long lastMoveTime = 0; // Zeit der letzten Bewegung (Millisekunden)

// Function prototypes
void send_Join();
void rcv_Player();
void send_GameAck();
void process_GameState(uint8_t* data);
void process_Error(uint8_t* data);
void process_Die(uint8_t* data);
void process_GameFinish(uint8_t* data);
void send_Move(uint8_t direction);
void send_Rename(const char* name, uint8_t size);
void send_RenameFollow(const char* name);
void onReceive(int packetSize);
int countFreeSpace(uint8_t x, uint8_t y);

// CAN receive callback
void onReceive(int packetSize) {
  if (packetSize) {
      switch (CAN.packetId()) {
          case Player:
              Serial.println("CAN: Received Player packet");
              rcv_Player();
              break;
          case Game:
              Serial.println("CAN: Received Game packet");
              send_GameAck();
              break;
          case GameState:
              Serial.println("CAN: Received GameState packet");
              uint8_t data[8];
              CAN.readBytes(data, sizeof(data));
              process_GameState(data);
              break;
          case Die:
              Serial.println("CAN: Received Die packet");
              uint8_t die_data[1];
              CAN.readBytes(die_data, sizeof(die_data));
              process_Die(die_data);
              break;
          case GameFinish:
              Serial.println("CAN: Received GameFinish packet");
              uint8_t finish_data[8];
              CAN.readBytes(finish_data, sizeof(finish_data));
              process_GameFinish(finish_data);
              break;
          case Error:
              Serial.println("CAN: Received Error packet");
              uint8_t error_data[2];
              CAN.readBytes(error_data, sizeof(error_data));
              process_Error(error_data);
              break;
          default:
              Serial.println("CAN: Received unknown packet");
              break;
      }
  }
}

// CAN setup
bool setupCan(long baudRate) {
    pinMode(PIN_CAN_STANDBY, OUTPUT);
    digitalWrite(PIN_CAN_STANDBY, false);
    pinMode(PIN_CAN_BOOSTEN, OUTPUT);
    digitalWrite(PIN_CAN_BOOSTEN, true);

    if (!CAN.begin(baudRate)) {
        return false;
    }
    return true;
}

// Setup
void setup() {
    Serial.begin(115200);
    //while (!Serial);
    
    Serial.println("Initializing CAN bus...");
    if (!setupCan(500000)) {
        Serial.println("Error: CAN initialization failed!");
        while (1);
    }
    Serial.println("CAN bus initialized successfully."); 

    CAN.onReceive(onReceive);

    delay(1000);
    send_Join();
}

// Loop remains empty, logic is event-driven via CAN callback
void loop() {}

// Send JOIN packet via CAN
void send_Join(){
    MSG_Join msg_join;
    msg_join.HardwareID = hardware_ID;

    CAN.beginPacket(Join);
    CAN.write((uint8_t*)&msg_join, sizeof(MSG_Join));
    CAN.endPacket();

    Serial.printf("JOIN packet sent (Hardware ID: %u)\n", hardware_ID);
}

void send_GameAck() {
  CAN.beginPacket(GameAck);
  CAN.write(player_ID); // Spieler-ID senden
  CAN.endPacket();
  Serial.printf("GameAck sent for Player ID: %u\n", player_ID);
}

// Receive player information
void rcv_Player(){
    MSG_Player msg_player;
    CAN.readBytes((uint8_t*)&msg_player, sizeof(MSG_Player));

    if(msg_player.HardwareID == hardware_ID){
        player_ID = msg_player.PlayerID;
        Serial.printf("Player ID recieved\n");
    }
    //  else {
    //     player_ID = 0;
    // }

    send_Rename("sucuk_", 6); // Send first 6 characters of the name
    send_RenameFollow("mafia"); // Send next 7 characters of the name

    Serial.printf("Received Player packet | Player ID received: %u | Own Player ID: %u | Hardware ID received: %u | Own Hardware ID: %u\n", 
        msg_player.PlayerID, player_ID, msg_player.HardwareID, hardware_ID);
}

void send_Move(uint8_t direction) {
  if (is_dead) {
    Serial.println("Cannot send move: Player is dead.");
    return; // Nachricht nicht senden
  }

  CAN.beginPacket(Move);
  CAN.write(player_ID); // Spieler-ID
  CAN.write(direction); // Richtung: 1=UP, 2=RIGHT, 3=DOWN, 4=LEFT
  CAN.endPacket();
  Serial.printf("Move sent: Player ID: %u, Direction: %u\n", player_ID, direction);
}


void process_GameState(uint8_t* data) {
    uint8_t player1_x = data[0];
    uint8_t player1_y = data[1];
    uint8_t player2_x = data[2];
    uint8_t player2_y = data[3];
    uint8_t player3_x = data[4];
    uint8_t player3_y = data[5];
    uint8_t player4_x = data[6];
    uint8_t player4_y = data[7];

    // Hindernisse und Spielerpositionen aktualisieren
    memset(grid, false, sizeof(grid)); // Spielfeld zurücksetzen

    // Spielerpositionen markieren
    if (player1_x != 255 && player1_y != 255) grid[player1_x][player1_y] = true;
    if (player2_x != 255 && player2_y != 255) grid[player2_x][player2_y] = true;
    if (player3_x != 255 && player3_y != 255) grid[player3_x][player3_y] = true;
    if (player4_x != 255 && player4_y != 255) grid[player4_x][player4_y] = true;

    // Kontinuierliche Bewegung
    unsigned long currentTime = millis();
    if (currentTime - lastMoveTime >= 500) { // Bewegung alle 500ms
        const int dx[] = {0, 1, 0, -1};
        const int dy[] = {-1, 0, 1, 0};

        // Zufällige Richtung wählen
        for (int attempt = 0; attempt < 4; attempt++) { // Maximal 4 Versuche
            int randomDirection = random(0, 4);

            // Verhindere Rückwärtsbewegung
            if ((lastDirection == 0 && randomDirection == 2) || // UP -> DOWN
                (lastDirection == 2 && randomDirection == 0) || // DOWN -> UP
                (lastDirection == 1 && randomDirection == 3) || // RIGHT -> LEFT
                (lastDirection == 3 && randomDirection == 1)) { // LEFT -> RIGHT
                continue; // Wähle eine andere Richtung
            }

            uint8_t nx = (player1_x + dx[randomDirection] + GRID_WIDTH) % GRID_WIDTH;
            uint8_t ny = (player1_y + dy[randomDirection] + GRID_HEIGHT) % GRID_HEIGHT;

            // Prüfen, ob die Richtung sicher ist und nicht Teil der eigenen Spur
            if (!grid[nx][ny]) {
                if (dx[randomDirection] == 1) send_Move(2); // RIGHT
                else if (dx[randomDirection] == -1) send_Move(4); // LEFT
                else if (dy[randomDirection] == 1) send_Move(3); // DOWN
                else if (dy[randomDirection] == -1) send_Move(1); // UP

                lastDirection = randomDirection; // Letzte Richtung speichern
                lastMoveTime = currentTime; // Timer zurücksetzen
                return; // Bewegung ausführen und zurückkehren
            }
        }

        // Keine sichere Richtung gefunden, in der aktuellen Richtung weiterfahren
        if (lastDirection != -1) {
            uint8_t nx = (player1_x + dx[lastDirection] + GRID_WIDTH) % GRID_WIDTH;
            uint8_t ny = (player1_y + dy[lastDirection] + GRID_HEIGHT) % GRID_HEIGHT;

            if (!grid[nx][ny]) {
                if (dx[lastDirection] == 1) send_Move(2); // RIGHT
                else if (dx[lastDirection] == -1) send_Move(4); // LEFT
                else if (dy[lastDirection] == 1) send_Move(3); // DOWN
                else if (dy[lastDirection] == -1) send_Move(1); // UP

                lastMoveTime = currentTime; // Timer zurücksetzen
            }
        }
    }
}

// Hilfsfunktion: Zähle freien Platz um eine Position
int countFreeSpace(uint8_t x, uint8_t y) {
    int freeSpace = 0;
    const int dx[] = {0, 1, 0, -1};
    const int dy[] = {-1, 0, 1, 0};

    for (int i = 0; i < 4; i++) {
        uint8_t nx = (x + dx[i] + GRID_WIDTH) % GRID_WIDTH; // Wrap-around
        uint8_t ny = (y + dy[i] + GRID_HEIGHT) % GRID_HEIGHT; // Wrap-around
        if (!grid[nx][ny]) {
            freeSpace++;
        }
    }
    return freeSpace;
}

void send_Rename(const char* name, uint8_t size) {
  CAN.beginPacket(0x500); // FrameID for rename
  CAN.write(player_ID);
  CAN.write(size);
  CAN.write((uint8_t*)name, 6); // First 6 characters
  CAN.endPacket();
  Serial.printf("Rename sent: Player ID: %u, Name: %.6s\n", player_ID, name);
}

void send_RenameFollow(const char* name) {
  CAN.beginPacket(0x510); // FrameID for renamefollow
  CAN.write(player_ID);
  CAN.write((uint8_t*)name, 7); // Next 7 characters
  CAN.endPacket();
  Serial.printf("RenameFollow sent: Player ID: %u, Name: %.7s\n", player_ID, name);
}

void process_Error(uint8_t* data) {
  uint8_t player_id = data[0];
  uint8_t error_code = data[1];
  Serial.printf("Error received: Player ID: %u, Error Code: %u\n", player_id, error_code);

  switch (error_code) {
      case 1:
          Serial.println("ERROR_INVALID_PLAYER_ID: Invalid Player ID.");
          break;
      case 2:
          Serial.println("ERROR_UNALLOWED_RENAME: Rename not allowed.");
          break;
      case 3:
          Serial.println("ERROR_YOU_ARE_NOT_PLAYING: Player is not in the game.");
          break;
      case 4:
          Serial.println("WARNING_UNKNOWN_MOVE: Invalid move direction.");
          break;
      default:
          Serial.println("Unknown error.");
          break;
  }
}

void process_Die(uint8_t* data) {
  uint8_t dead_player_id = data[0];
  Serial.printf("Player %u died\n", dead_player_id);

  if (dead_player_id == player_ID) {
      Serial.println("You died! Game over.");
      is_dead = true; // Spieler ist tot, keine Nachrichten mehr senden
  }

  // Traces des gestorbenen Spielers freigeben
  if (dead_player_id >= 1 && dead_player_id <= 4) {
      for (const auto& trace : player_traces[dead_player_id - 1]) {
          grid[trace.first][trace.second] = false; // Bereich freigeben
      }
      player_traces[dead_player_id - 1].clear(); // Traces löschen
      Serial.printf("Traces for Player %u cleared.\n", dead_player_id);
  }
}

void process_GameFinish(uint8_t* data) {
  Serial.println("Game finished. Points distribution:");
  for (int i = 0; i < 4; i++) {
      uint8_t player_id = data[i * 2];
      uint8_t points = data[i * 2 + 1];
      Serial.printf("Player %u: %u points\n", player_id, points);
  }

  // Spielzustand zurücksetzen
  is_dead = false; // Spieler ist wieder aktiv
  memset(grid, false, sizeof(grid)); // Spielfeld zurücksetzen
  for (int i = 0; i < 4; i++) {
      player_traces[i].clear(); // Traces aller Spieler löschen
  }

  // Erneut dem Spiel beitreten
  Serial.println("Rejoining the game...");
  send_Join(); // Sende die `join`-Nachricht erneut
}
